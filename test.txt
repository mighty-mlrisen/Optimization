temporary_population = []
        while len(temporary_population) < population_size:
            # Отбор родителей (метод рулетки)            
            parents = population[np.random.choice(
                population_size, 2, p=probabilities, replace=False)]
            
           
            if used_methods['crossover']:
                if np.random.rand() < crossover_prob:
                    alpha1 = np.random.uniform(-recombination_parameter, 
                                            1 + recombination_parameter, 
                                            size=parents[0].shape)
                    alpha2 = np.random.uniform(-recombination_parameter, 
                                            1 + recombination_parameter, 
                                            size=parents[0].shape)
                    child1 = parents[0] + alpha1 * (parents[1] - parents[0])
                    child2 = parents[0] + alpha2 * (parents[1] - parents[0])
                else:
                    child1, child2 = parents[0], parents[1]
            else:
                child1, child2 = parents[0], parents[1]
            
            for child in [child1, child2]:
                # Мутация (мутация для вещественных особей)
                if used_methods['mutation']:
                    if np.random.rand() < mutation_prob:
                        delta = sum(2**(-i) * (np.random.rand() < (1/mutation_parameter)) for i in range(1, mutation_parameter+1))
                        
                        child[0] += delta+0.5*(bounds[0][1]-bounds[0][0]) * ((-1) if np.random.rand()<=0.5 else 1)
                        child[1] += delta+0.5*(bounds[1][1]-bounds[1][0]) * ((-1) if np.random.rand()<=0.5 else 1)
                    
                    # Проверка границ
                    child[0] = np.clip(child[0], bounds[0][0], bounds[0][1])
                    child[1] = np.clip(child[1], bounds[1][0], bounds[1][1])
                temporary_population.append(child)

        population = np.array(temporary_population)