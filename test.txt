temporary_population = []
        while len(temporary_population) < population_size:
            # Отбор родителей (метод рулетки)            
            parents = population[np.random.choice(
                population_size, 2, p=probabilities, replace=False)]
            
           
            if used_methods['crossover']:
                if np.random.rand() < crossover_prob:
                    alpha1 = np.random.uniform(-recombination_parameter, 
                                            1 + recombination_parameter, 
                                            size=parents[0].shape)
                    alpha2 = np.random.uniform(-recombination_parameter, 
                                            1 + recombination_parameter, 
                                            size=parents[0].shape)
                    child1 = parents[0] + alpha1 * (parents[1] - parents[0])
                    child2 = parents[0] + alpha2 * (parents[1] - parents[0])
                else:
                    child1, child2 = parents[0], parents[1]
            else:
                child1, child2 = parents[0], parents[1]
            
            for child in [child1, child2]:
                # Мутация (мутация для вещественных особей)
                if used_methods['mutation']:
                    if np.random.rand() < mutation_prob:
                        delta = sum(2**(-i) * (np.random.rand() < (1/mutation_parameter)) for i in range(1, mutation_parameter+1))
                        
                        child[0] += delta+0.5*(bounds[0][1]-bounds[0][0]) * ((-1) if np.random.rand()<=0.5 else 1)
                        child[1] += delta+0.5*(bounds[1][1]-bounds[1][0]) * ((-1) if np.random.rand()<=0.5 else 1)
                    
                    # Проверка границ
                    child[0] = np.clip(child[0], bounds[0][0], bounds[0][1])
                    child[1] = np.clip(child[1], bounds[1][0], bounds[1][1])
                temporary_population.append(child)

        population = np.array(temporary_population)




html.Div(
    style={'display': 'flex', 'align-items': 'center', 'margin-bottom': '5px'},
    children=[
        html.Label("Коэффициент k:", style={'margin': '10px', 'margin-left': '0px'}),
        dcc.Input(
            id='ga-crossover-prob',
            type='number',
            placeholder='a3',
            value=0.7,
            style=input_style,
            required=True,
            min=0,  # Минимальное значение
            max=1,  # Максимальное значение
            step=0.01  # Шаг изменения
        ),
    ]
)



html.Div(
                            style={'display': 'flex', 'align-items': 'center', 'margin-bottom': '5px'},
                            children=[
                                html.Label("Коэффициент k:", style={'margin': '10px', 'margin-left': '0px'}),
                                dcc.Input(id='ps-current-velocity-ratio', type='number', placeholder='a3', value=0.5, style=input_style, required=True),
                            ]
                        ),





from abc import ABCMeta, abstractmethod

import numpy
import numpy.random

from methods.particleswarm.particle import Particle


class Swarm (object):
    __metaclass__ = ABCMeta

    def __init__ (self, 
            func,
            swarmsize, 
            minvalues, 
            maxvalues, 
            currentVelocityRatio,
            localVelocityRatio, 
            globalVelocityRatio,
            penaltyRatio):
        """
        swarmsize - размер роя (количество частиц)
        minvalues - список, задающий минимальные значения для каждой координаты частицы
        maxvalues - список, задающий максимальные значения для каждой координаты частицы
        currentVelocityRatio - общий масштабирующий коэффициент для скорости
        localVelocityRatio - коэффициент, задающий влияние лучшей точки, найденной частицей на будущую скорость
        globalVelocityRatio - коэффициент, задающий влияние лучшей точки, найденной всеми частицами на будущую скорость
        """
        self.__func = func
        self.__swarmsize = swarmsize

        assert len (minvalues) == len (maxvalues)
        assert (localVelocityRatio + globalVelocityRatio) > 4

        self.__minvalues = numpy.array (minvalues[:])
        self.__maxvalues = numpy.array (maxvalues[:])

        self.__currentVelocityRatio = currentVelocityRatio
        self.__localVelocityRatio = localVelocityRatio
        self.__globalVelocityRatio = globalVelocityRatio

        self.__globalBestFinalFunc = None
        self.__globalBestPosition = None
        
        self._penaltyRatio = penaltyRatio

        self.__swarm = self.__createSwarm ()


    def __getitem__ (self, index):
        """
        Возвращает частицу с заданным номером
        """
        return self.__swarm[index]


    def __createSwarm (self):
        """
        Создать рой из частиц со случайными координатами
        """
        return [Particle (self) for _ in range (self.__swarmsize) ]


    def getFinalFunc (self, position):
        assert len (position) == len (self.minvalues)

        finalFunc = self._finalFunc (position)

        if (self.__globalBestFinalFunc is None or
                finalFunc < self.__globalBestFinalFunc):
            self.__globalBestFinalFunc = finalFunc
            self.__globalBestPosition = position[:]
        return finalFunc


    def _finalFunc (self, position):
        return self.__func(position) + self._getPenalty(position)







def functions(function_name):
    s = function_name.lower()
    match s:
        case "rosenbrock":
            return lambda x, y: (1-x)**2 + 100*((y-x**2)**2)
        case "bukin":
            return lambda x, y: 100*np.sqrt(abs(y-0.01*(x**2))) + 0.01*abs(x+10)
        case "himmelblau":
            return lambda x, y: (x**2 + y -11)**2 + (x + y**2 - 7)**2
        case "isom":
            return lambda x, y: -np.cos(x)*np.cos(y)*np.exp(-((x-np.pi)**2 + (y-np.pi)**2))
        case "rastrigin":
            return lambda x, y: 20 + (x**2 - 10*np.cos(2*np.pi*x)) + (y**2 - 10*np.cos(2*np.pi*y))
        case "goldstein_price":
            return lambda x, y: (1 + ((x+y+1)**2)*(19-14*x+3*(x**2)-14*y+6*x*y+3*(y**2)))*(30 + ((2*x-3*y)**2)*(18-32*x+12*(x**2)+48*y-36*x*y+27*(y**2)))
        case "cross_in_tray":
            return lambda x, y: -0.0001 * ((abs(np.sin(x)*np.sin(y)*np.exp(abs(100 - (np.sqrt(x**2+y**2)/np.pi)))) + 1)**0.1)
        case "sphere":
            return lambda x, y: x**2 + y**2
        

# Конфигурация тестовых функций
global_minima = {
    "rosenbrock": ((1, 1), 0),
    "himmelblau": ((3.0, 2.0), 0),
    "isom": ((np.pi, np.pi), -1),
    "sphere": ((0, 0), 0),
    "rastrigin": ((0, 0), 0),
    "bukin": ((-10, 1), 0)
}

test_config = {
    "rosenbrock": {"bounds": [[-5, 5], [-5, 5]]},
    "himmelblau": {"bounds": [[-5, 5], [-5, 5]]},
    "isom": {"bounds": [[0, 6], [0, 6]]},
    "sphere": {"bounds": [[-5, 5], [-5, 5]]},
    "rastrigin": {"bounds": [[-5.12, 5.12], [-5.12, 5.12]]},
    "bukin": {"bounds": [[-15, -5], [-3, 3]]}
}

test_config2 = {
    "rosenbrock": {"bounds": [[-5, -5], [5, 5]]},
    "himmelblau": {"bounds": [[-5, -5], [5, 5]]},
    "isom": {"bounds": [[0, 0], [6, 6]]},
    "sphere": {"bounds": [[-5, -5], [5, 5]]},
    "rastrigin": {"bounds": [[-5.12, -5.12], [5.12, 5.12]]},
    "bukin": {"bounds": [[-15, -3], [-5, 3]]}
}